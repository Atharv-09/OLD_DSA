// time = O(m*n)
// space = 0(1) 

void getUnion(Node head1, Node head2)
{
    Node t1 = head1, t2 = head2;

    // insert all elements of list1 in the result
    while (t1 != null) {
        push(t1.data);
        t1 = t1.next;
    }

    // insert those elements of list2
    // that are not present
    while (t2 != null) {
        if (!isPresent(head, t2.data))
            push(t2.data);
        t2 = t2.next;
    }
}

void getIntersection(Node head1, Node head2)
{
    Node result = null;
    Node t1 = head1;

    // Traverse list1 and search each
    // element of it in list2.
    // If the element is present in
    // list 2, then insert the
    // element to result
    while (t1 != null) {
        if (isPresent(head2, t1.data))
            push(t1.data);
        t1 = t1.next;
    }
}

/* Utility function to print list */
void printList()
{
    Node temp = head;
    while (temp != null) {
        System.out.print(temp.data + " ");
        temp = temp.next;
    }
    System.out.println();
}

/*  Inserts a node at start of linked list */
void push(int new_data)
{
    /* 1 & 2: Allocate the Node &
              Put in the data*/
    Node new_node = new Node(new_data);

    /* 3. Make next of new Node as head */
    new_node.next = head;

    /* 4. Move the head to point to new Node */
    head = new_node;
}

/* A utilty function that returns true 
   if data is present in linked list 
   else return false */
boolean isPresent(Node head, int data)
{
    Node t = head;
    while (t != null) {
        if (t.data == data)
            return true;
        t = t.next;
    }
    return false;
}

//-------------------------------------------------------------

//time = O(m+n)
//space = O(m+n)

public static Node findIntersection(Node head1, Node head2)
{
        HashSet<Integer> hs = new HashSet<>();
            
        Node n2 = head2;
        while(n2!=null){
            hs.add(n2.data);
            n2 = n2.next;
        }
        
        Node n1 = head1;
        
        Node dum = new Node(0);
        Node temp = dum;
        
        while(n1!=null){
            if(hs.contains(n1.data)){
                temp.next = new Node(n1.data);
                temp = temp.next;
            }
            n1 = n1.next;
        }
        
        return dum.next;
}


//UNINON 

//time = O(m+n) 
// space = O(n) 

public static Node findUnion(Node head1,Node head2)
	{
        HashSet<Integer> hs = new HashSet<>();
        
        Node n1 = head1;
        Node n2 = head2;
        
        while(n1!=null){
            hs.add(n1.data);
            n1 = n1.next;
        }
        
        while(n2!=null){
            hs.add(n2.data);
            n2 = n2.next;
        }
        Node dum = new Node(-1);
        Node temp = dum;
        
        Iterator<Integer> i = hs.iterator();
        while(i.hasNext()){
            temp.next = new Node(i.next());
            temp = temp.next;
        }
        
        return dum.next;
	}